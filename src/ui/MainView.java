/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Temp    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
lates
 * and open the template in the editor.
 */
package ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.sound.midi.*;
import javax.sound.sampled.*;
import javax.media.*;



/**
 *
 * @author yjq97
 */
public class MainView extends JFrame implements ActionListener, ControllerListener {

    // 保存所有音乐文件
    private ArrayList<File> allFile = new ArrayList<File>();
    // 保存名称
    private ArrayList<String> musicName = new ArrayList<String>();
    // 记录列表选择的位置 与上面两个list对应
    private int chooseIndex;
    private int index;
    private URL url;
    String flag;
    String tt;
    // Length and position of the sound are measured in milliseconds for
    // sampled sounds and MIDI "ticks" for MIDI sounds
    int audioLength; // Length of the sound.
    int audioPosition = 0; // Current position within the sound
    // 播放
    Player player = null;
    MusicFileChooser fileChooser = new MusicFileChooser();
   
    static int newtime = 0;
    int ischanging = 0; //当鼠标是对游标进行点击，进度值也会改变
    int ispressing = 0; //判断鼠标是否对游标进行点击
    int countSecond; //获取音乐的总时间值
    
    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        restart = new javax.swing.JButton();
        pre = new javax.swing.JButton();
        progress = new javax.swing.JSlider();
        information = new javax.swing.JLabel();
        pricture = new javax.swing.JLabel();
        start = new javax.swing.JButton();
        next = new javax.swing.JButton();
        volumeOOO = new javax.swing.JToggleButton();
        jsVolume = new javax.swing.JSlider();
        jlLeft = new javax.swing.JLabel();
        jlRight = new javax.swing.JLabel();
        jpList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        get = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        restart.setText("播放");

        pre.setText("上一首");
        pre.setActionCommand("pre");

        progress.setValue(0);
        progress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                progressMousePressed(evt);
            }
        });
        progress.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent arg0){
                ispressing = 1;
            }
            public void mouseReleased(MouseEvent arg0){
                ispressing = 0;
            }
        });
        if(player != null) {
            if(ispressing == 0) {
                if(ischanging == 1) {
                    newtime = progress.getValue();
                    player.setMediaTime(new Time(((long)newtime)*1000000000));
                    ischanging = 0;
                } else {
                    newtime = (int)player.getMediaTime().getSeconds();
                    progress.setValue(newtime);
                    jlLeft.setText(newtime/60+":"+newtime%60);
                    jlRight.setText(countSecond/60+":"+countSecond%60);
                }
            }
        }

        information.setBackground(new java.awt.Color(0, 255, 255));
        information.setText("jLabel1");
        information.setOpaque(true);

        pricture.setBackground(new java.awt.Color(0, 153, 204));
        pricture.setText("jLabel1");
        pricture.setOpaque(true);

        start.setText("开始");
        start.setActionCommand("start");
        start.addActionListener(this);

        next.setText("下一首");
        next.setActionCommand("next");

        volumeOOO.setText("V");
        volumeOOO.setActionCommand("btnvoluem");

        jsVolume.setValue(30);
        jsVolume.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent event){
                jsVolume.setValue(jsVolume.getValue());
            }
        });

        jlLeft.setBackground(new java.awt.Color(204, 255, 255));
        jlLeft.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlLeft.setText("00:00");
        jlLeft.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jlLeft.setOpaque(true);

        jlRight.setBackground(new java.awt.Color(204, 0, 102));
        jlRight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlRight.setText("00:00");
        jlRight.setOpaque(true);

        jList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        initList();
        jList = new JList<String>(musicName.toArray(new String[] {}));
        jList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                chooseIndex = jList.getSelectedIndex();
                delete.setEnabled(true);
            }
        });
        jScrollPane1.setViewportView(jList);

        get.setText("添加歌曲");
        get.addActionListener((ActionEvent e) -> {
            Object obj = e.getSource();
            if(obj==get){
                JFileChooser chooser = new JFileChooser();
                //设置选择器 只能选择具体的类型(这里是mp3 和 wav)
                myFileFilter filter = new myFileFilter();
                chooser.addChoosableFileFilter(filter);
                chooser.setFileFilter(filter);
                chooser.showDialog(new JLabel(), "选择");
                //得到选择的文件
                File f = chooser.getSelectedFile();
                if (f == null)
                return;
                String endPath = new File("Music").getAbsolutePath() + "/" + f.getName();
                //将这个文件移动到music文件夹下
                f.renameTo(new File(endPath));
                //更新集合
                initList();
                jList.removeAll();
                //更新jlist选择的元素
                ListModel<String> model = new DefaultComboBoxModel(musicName.toArray(new String[] {}));
                jList.setModel(model);
            }
        });

        delete.setText("删除歌曲");
        delete.addActionListener((ActionEvent e) -> {
            Object obj = e.getSource();
            //如果点击删除按钮
            if (obj == delete) {
                //根据选择的下标得到文件
                File f = allFile.get(chooseIndex);
                //删除文件夹里的文件
                f.delete();
                //从集合中删除
                allFile.remove(chooseIndex);
                musicName.remove(chooseIndex);
                //更新jlist显示的东西
                jList.removeAll();
                ListModel<String> model = new DefaultComboBoxModel(musicName.toArray(new String[] {}));
                jList.setModel(model);
                //设置删除按钮不可选中(只有你选择了具体的音乐之后才可选)
                delete.setEnabled(false);
            }
        });

        javax.swing.GroupLayout jpListLayout = new javax.swing.GroupLayout(jpList);
        jpList.setLayout(jpListLayout);
        jpListLayout.setHorizontalGroup(
            jpListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpListLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpListLayout.createSequentialGroup()
                        .addComponent(get)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delete)))
                .addContainerGap())
        );
        jpListLayout.setVerticalGroup(
            jpListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpListLayout.createSequentialGroup()
                .addGroup(jpListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(get)
                    .addComponent(delete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 574, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jlLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 784, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlRight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pricture, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(information, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volumeOOO)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jsVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlRight, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jsVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pricture, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(information, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(start)
                        .addComponent(restart)
                        .addComponent(pre)
                        .addComponent(next)
                        .addComponent(volumeOOO)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void progressMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progressMousePressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_progressMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
//        lrcreader lr=new lrcreader("d:\\1258.lrc");
        
    }
    
    
    
    /**
     * 从文件夹获取所有已存在的音乐文件
     */
    public void initList(){//在main函数中重建线程实现
            
            musicName.clear();
            allFile.clear();
            File f = new File("Music");
            //如果这个文件夹不存在就创建文件夹
            if (!f.exists()) {
			f.mkdirs();
		} else {
			//得到文件夹里的所有文件
			File fa[] = f.listFiles();
			for (int i = 0; i < fa.length; i++) {
				File fs = fa[i];
				if (!fs.isDirectory()) {
					//得到文件名和文件类型后缀
					String name = fs.getName().substring(0, fs.getName().indexOf("."));
					String type = fs.getName().substring(fs.getName().indexOf(".") + 1);
					if (type.toLowerCase().equals("mp3") || type.toLowerCase().equals("wav")) {
						musicName.add(name);
						allFile.add(fs);
					}
				}
			}

		}
        }

    @Override
    public void actionPerformed(ActionEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
          String cmd = e.getActionCommand();
          if(e.getSource()==start){
              index = chooseIndex;
              if(player==null){
              if(index>=0){
                  try {
                      jList.setSelectedIndex(index);
                      flag = (String)jList.getSelectedValue();
                      tt =flag;                      
//                      if(file.exists()){    
//                         MediaLocator  locator=new MediaLocator("file:///D:/a.mp3"/*+file.getAbsolutePath()*/);    
//                         System.out.println("file:///D:/a.mp3"/*+file.getAbsolutePath()*/);
////                           player = Manager.createRealizedPlayer(locator);   
//                            player = Manager.createPlayer(locator);
//                           player.prefetch();// 预读文件    
//                    }else{    
//                         System.err.println(file+"  找不到");    
//                    }                      
//                      file = new File(url); 
                      url = new URL("file:"+"/Music/"+flag+".mp3");
                      String s = "/Music/"+flag+".mp3";
                      File file = new File(s);
//                      file = new File(url);
                      MediaLocator locator = new MediaLocator(url);
                      player = Manager.createPlayer(locator);
                      player.prefetch();
                      player.start();
                      start.setText("暂停");
                  }catch(Exception ee){
                      System.out.println("shibai");
                      System.out.println(url);
                  }
              }
              }
              if(player!=null){
                  player.stop();
                  start.setText("开始");
              }
          }
          
          if(e.getSource()==restart){
              if(player!=null){
                player.stop();
                progress.setValue(0);
                jlLeft.setText("00:00");
                jlRight.setText("00:00");
                player.setMediaTime(new Time(0)); //设置时间为零
                player.start();
              }else{
                  System.out.println("重新播放失败!");
              }
          }
          if(e.getSource()==pre){
              if (player!=null) {
                  player.stop();
                  index = chooseIndex;
                  if(index>=1 ){
                      try{
                      if(--index>=0)
                      {
                      jList.setSelectedIndex(index);
                      flag = (String)jList.getSelectedValue();
                      tt =flag;
                      url = new URL("file:"+"/Music/"+flag+".mp3");
                      String s = "/Music/"+flag+".mp3";
                      File file = new File(s);
//                      file = new File(url);
                      MediaLocator locator = new MediaLocator(url);
                      player = Manager.createPlayer(locator);
                      player.prefetch();
                      player.start();
                      }
                      }catch(Exception eee){
                          System.out.println("上一首播放失败！");
                      }
                  }
              }
          }
          if (e.getSource()==next) {
             if (player!=null) {
                  player.stop();
                  index = chooseIndex;
                  if(index>=1 ){
                      try{
                      ++index;
                      while(index>=musicName.size()){
                      jList.setSelectedIndex(index);
                      flag = (String)jList.getSelectedValue();
                      tt =flag;
                      url = new URL("file:"+"/Music/"+flag+".mp3");
                      String s = "/Music/"+flag+".mp3";
                      File file = new File(s);
//                      file = new File(url);
                      MediaLocator locator = new MediaLocator(url);
                      player = Manager.createPlayer(locator);
                      player.prefetch();
                      player.start();
                      }
                      }catch(Exception eee){
                          System.out.println("下一首播放失败！");
                      }
                  }
              }            
          }
    }
    
    /**
     * 设置文件选择器选择的类型
     */
    class myFileFilter extends javax.swing.filechooser.FileFilter{
		public String getDescription() {
			return "*.mp3;*.wav";
		}

		public boolean accept(File file) {
			String name = file.getName();
			return file.isDirectory() || name.toLowerCase().endsWith(".mp3") || name.toLowerCase().endsWith(".wav");
		}
	}
    
    class MusicFileChooser extends JFileChooser {
    }
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JButton get;
    private javax.swing.JLabel information;
    private javax.swing.JList<String> jList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlLeft;
    private javax.swing.JLabel jlRight;
    private javax.swing.JPanel jpList;
    private javax.swing.JSlider jsVolume;
    private javax.swing.JButton next;
    private javax.swing.JButton pre;
    private javax.swing.JLabel pricture;
    private javax.swing.JSlider progress;
    private javax.swing.JButton restart;
    private javax.swing.JButton start;
    private javax.swing.JToggleButton volumeOOO;
    // End of variables declaration//GEN-END:variables
}
